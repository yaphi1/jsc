# Things to Know (and Potential Dangers) with Third-Party Scripts


The web is full of third-party scripts that track your behavior, your preferences, and other information.

Sites use these scripts for ads, analytics, retargeting, and more, but this isn't always the whole story.

Here, we're going to look at the potential risks of these third-party scripts.




##A third-party script might be a privacy concern

First off, third-party scripts can report back data that you weren't aware of.

According to documentation from [Google](https://support.google.com/adwords/answer/2453998?hl=en), [Facebook](https://www.facebook.com/business/help/952192354843755), and [Wikipedia](https://en.wikipedia.org/wiki/Web_beacon), these scripts can track behavior, sites visited, purchase history, demographics, IP address, location, and more, but that part is generally known.

[screenshot of code sample or maybe documentation showing parameters facebook tracks]

While standard third-party tracking is generally documented, there may be tracking we don't know about.

For example, according to [a study](http://senglehardt.com/papers/www15_cookie_surveil.pdf) by researchers at Princeton and Stanford, 42% of the top sites (Alexa top 50 U.S.) present unique identifiers in plain text.  That means eavesdroppers can track things like your email, username, full name, home address, purchases, location, history, IP address, and preferences.  Just by clicking around the web, you can unknowingly allow someone to build up a huge profile of information about you.  In fact, that same [study](http://senglehardt.com/papers/www15_cookie_surveil.pdf) discussed how the NSA piggybacked on some of Google's scripts to track people.

Here's a screenshot of an advertiser's official implementation guide that explicitly gives people code to transmit email addresses to them as unencrypted plain text.  They encrypt each address after receiving it, but it still gets sent as plain text, so the damage is done.

[screenshot of implementation guide with unencrypted email code]




##A third-party script might be a security concern

Any time you include someone else's external script on your page, there's an inherent security risk because that script has backdoor access to your site.

Here are some examples of what these scripts have done.


###Leaking credit card info through unsanitized data

Security researcher Randy Westergren discovered that many major tracking scripts [don't sanitize data properly](https://randywestergren.com/widespread-xss-vulnerabilities-ad-network-code-affecting-top-tier-publishers-retailers/) (thanks to my colleague Sam Ratcliffe for bringing this article to my attention).  This allows attackers to inject any code they want, including code that can steal credit card numbers.

Here's a screenshot of malicious code getting injected into an unsanitized url:

[screenshot of script injection]

Many of the advertisers have since fixed the vulnerability, but that leaves open the question of what other exploits are still out there.


### Exposing private data with non-https scripts

Many tracking scripts in the wild use regular http.  This can let attackers grab people's information, and it can cause security warnings that can scare away users on secure pages.

Here's an example of an implementation guide that uses http on a secure cart page.

[code example]


###Code can change without you knowing

With third-party scripts, there's always the danger that the code can change or disappear without you knowing it.

My colleague Brent Kimmel told me about a technique called [subresource integrity](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity), which essentially lets you make sure what you get is what you expect.  At the time of this writing, it hasn't gained full browser support yet, but keep your eyes open for it.

Also keep in mind that this technique works best when the original third-party script isn't flawed in the first place.


###Third-party scripts often load other third-party scripts of their own

When the third-party scripts you trust bring in scripts you don't expect, this multiplies the potential for all of the security and privacy risks mentioned thus far.

Here's an example of a third-party script loading other scripts:

[screenshot]






##A third-party script might be a performance concern


###Slower page loads

Third-party scripts frequently cause pages to load slower.  For example, here's a screenshot from Business Insider showing that their actual site loads in about 1 second while third-party scripts account for the majority of the remaining 9 seconds of load time.

[screenshot of page load speed test graph]

To their credit, Business Insider appears to load most of their third-party scripts in the background, so the perceived loading time doesn't take nearly as long as 10 seconds.

What happens when third-party scripts don't let you load them in the background?


###Some scripts don't let themselves load in the background

When a script uses document.write, that prevents it from being loaded asynchronously.  A lot of common third-party scripts use document.write, so they block the document and extend page load times unnecessarily.

Here's an example:

[screenshot of doubleclick using doc write]


###Some scripts affect scrolling performance

Third-party scripts often perform operations on the scroll event.  Here's a screenshot of a script running a loop on every scroll.

[screenshot]

While this example alone won't take down a site, it can contribute to a noticable slowdown when multiple scripts are hammering the scroll event.








##A third-party script might have unintended consequences

Third-party scripts can do all sorts of unexpected things to your pages.  Here are a few.


###Overwriting your variables

Some of the most widely used third-party scripts on the web use unnecessary global variables which can overwrite the variables on your site.

The following screenshot shows a script using two global variables to generate one random number (even using an unnecessary type conversion and an invalid url parameter in the process).

[doubleclick script screenshot]


###Creating unnecessary risks by using eval

Since eval will run anything, it's a prime target for attackers.  Here's an example of a tracking script with a function that uses eval on any arbitrary JavaScript.  Interestingly enough, the function is actually called runArbitraryJS.

[screenshot of arbitrary js eval]

While eval doesn't necessarily destroy everything in all cases, it does pose risks, so it at least warrants a second look when you see it.


###Changing your layout

Some tracking scripts insert 1x1 pixel images at the bottom or top of your page, which can create a gap above your header or below your footer.

The following screenshot shows a tracking tag creating a gap at the bottom of the Comcast/Xfinity site.

[screenshot of comcast layout change]


###Setting you up for errors by tying functionality too closely to the DOM

The following example shows a tracking script whose functionality depends on specific DOM elements.  A slight change to the site's layout can break this code.

[screenshot of tightly coupled functionality with specific dom elements]




##Final recap

Third-party scripts provide powerful functionality, but they also bring risks to privacy, security, performance, and page behavior.

Now that you've seen some of the risks of third-party scripts, you'll hopefully have an idea of what to expect when you encounter them.


