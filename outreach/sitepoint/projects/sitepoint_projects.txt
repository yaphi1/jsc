Projects Can Sometimes Be the Worst Way to Learn JavaScript




One of the most surprisingly dangerous pieces of advice to JavaScript learners is to "just do projects."

To be 100% clear, projects are often a great way to learn any coding language.  However, problems arise when people attempt certain projects before they know enough of the basics to judge what's reasonable.

This topic is important because attempting a project too early is one of the most common reasons people give up on JavaScript entirely.

I'm not about to let that happen to you, so here's what we'll cover:

- The most common traps JavaScript learners fall into when attempting projects and why
- Specific examples of projects that frequently stop people from learning JavaScript
- How to avoid the common traps and learn more effectively
- When and how to start doing projects

The aim of this article is to give you confidence in moving forward, whether you're learning JavaScript or any other language.




## The Common Phrase that Often Leads to Failure

One of the most common things I hear from people who want to learn JavaScript is, "I'll just make a quick slideshow."

They'll try to make the slideshow, and one of two things will usually happen:

1. It'll be too hard, and they tell themselves they'll "come back to it later" which often means giving up forever.

2. They'll succeed in creating the slideshow, but since they had to cover so much material at once, they won't be able to apply it afterwards.  This leads to discouragement, which can mean, once again, giving up forever.

Why does this happen?




## The Trap of Too Much Too Soon

JavaScript learners often pick a slideshow as their first project because it sounds simple.

Once they attempt it, they discover it's harder than they thought.  Making a slideshow might involve arrays, functions, loops, animation, timing, event listeners, DOM manipulation and more.  This can be an overwhelming number of new concepts for someone who is starting out.

Suddenly, this project that was supposed to be easy is too difficult.  That difference from the orignal expectation creates a nasty psychological effect.  "If I can't do this easy thing," learners tell themselves, "then maybe I'm just not cut out for JavaScript."

Alternatively, some people will succeed in creating a slideshow, but it'll be cobbled together with a ton of help from tutorials and relatively little understanding of what's happening.  In those cases, you frequently hear phrases like, "I was able to follow along with the tutorial, but then I couldn't apply any of it on my own."

Either way, the end result is often a feeling of discouragement that can lead to the "I'll do it later" trap.  This trap is particularly dangerous because it doesn't sound like that big of a deal.  There's no permanence in saying "later," so it's easy to commit to.  Too often, "later" becomes "never."

These scenarios happen not just with slideshows but other projects that learners will attempt too soon.  For example, a to-do list sounds simple, but that can be a full-stack project if the data is to be saved outside the browser's local storage or cookies.

When someone is starting to learn JavaScript, it can be hard to identify the difficulty level of a project beforehand, and that's the source of the trouble.


## Which Projects Often Hinder Learning

In order to make this discussion more concrete, here are some specific, simple-sounding projects people often attempt too early and the concepts that are actually involved.

Project: Quiz
Concepts involved: Arrays, objects, functions, forms, event listeners

Project: To-do list
Concepts involved: Arrays, objects, functions, some form of storage (front-end or back-end), DOM manipulation, event listeners

Project: A "little social network"
Concepts involved: This is a full-stack project that, in addition to front-end JavaScript, involves back-end concepts including databases, authentication, security, user management, etc.

### What's the Point?

The point of this section is not to scare you off from attempting new things.  You can arrive at some of these projects faster than you'd expect as long as you don't start with them from the beginning.

All you need is a better approach.


## How to Learn More Effectively

Instead of jumping directly into big projects, try learning the smallest pieces of functionality first.

Show text inside a div with `innerHTML`.  Change the color of a paragraph's text.  Add two numbers together.  Write your first function.  Get comfortable with variables.  Store a collection of things in an array or an object.  Make something happen when a button gets clicked.  Learn about logic with `if` and `else`.  Try some loops.

Play with these concepts and get comfortable with them.  You'll soon find yourself able to create lots of things.  In addition, your newfound experience will make you much better at deciding which projects to do.  As you see yourself succeed more, your confidence will grow, and the momentum will carry you forward much faster than trying to rush into a big project at the beginning.

To be clear, challenges are important because they help you grow.  It's great to stretch beyond your comfort zone but not so far that it gets in the way of your progress.


## So When Do the Projects Happen?

Once you begin learning the fundamentals of JavaScript, you'll start to know what sorts of projects are within reach.

While it's important to challenge yourself, you don't want to try building an end-to-end digital banking app, for example, before you know how to display a line of text on the screen.

Let's look at some specific examples of concepts you can learn and mini-projects you can then do.

New concepts learned:
Variables, functions

Possible mini-project:
- Create a greeting function that takes your name from a variable and displays a greeting to you on the page.


New concepts learned:
Click handling, changing a class

Possible mini-projects:
- Create a "more information" button that makes a blurb of information appear or disappear.
- Create two theme selection buttons.  When you click either one of them, a bunch of stuff on the page changes colors and styles to fit a theme.


New concepts learned:
If statements, random numbers

Possible mini-project:
- Create a game where there are two doors and you have to click on the correct one to get the prize.


New concepts learned:
Get a text input value, JavaScript arithmetic

Possible mini-project:
- Create a restaurant tip calculator


New concepts learned:
Arrays, loops

Possible mini-project:
- Create the front end of a social posting site.  Use an array to hold a list of text posts.  Loop through that array to display the posts.



### Where Is This Going?

Notice that we've done things in a different order this time.  Instead of starting with a project and trying to play catch-up with the required concepts, we've started with the concepts and built projects based on those.

This has a profound impact on how you learn because instead of jumping too far ahead and feeling behind, you learn the foundations that let you move forward confidently at each step.  The little things you learn build on each other, and soon enough, you arrive at the bigger projects you wanted to do in the first place.




##Key Takeaways

Projects can be among the best and worst ways to learn JavaScript.  The difference is in the timing.

- **Projects too early = trap**
One of the most common ways people fail to learn JavaScript is to jump into a project before knowing enough of the basics to understand what's reasonable.  This often leads to discouragement and quitting.

- **Concepts first, projects second**
To avoid the project trap, play with concepts first and then do mini-projects based on those concepts.  That way, you won't get in too deep too soon.

- **Projects at the right time = more effective learning**
Approaching your learning with concepts first can give the following benefits: stronger understanding, better retention, encouragement, momentum, feeling less overwhelmed, and faster progress.

In closing, it should be said that everyone learns differently.  None of the ideas in this article are meant to be hard and fast rules.  Instead, they are friendly suggestions that I hope will help you or someone you know avoid the traps I've seen too many people fall into.










