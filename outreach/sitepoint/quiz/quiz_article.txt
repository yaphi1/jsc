
OSX sublime keymap
{ "keys": ["command+option+w"], "command": "toggle_setting", "args" : {"setting": "word_wrap"} }

also remember to use spaces instead of tabs for code samples


use cases
- general quiz
- product proposals/selections
- mention data security as well



## Set up the Structure of Your Quiz

We want to create a situation where we can list our quiz's questions and answers, and our JavaScript will automatically generate a quiz.

That way, we won't need to write a bunch of repetitive markup, and we can add and remove questions easily.

To set up the structure of our JavaScript quiz, we'll need to start with the following HTML:

- A div to store the quiz
- A button to submit the quiz
- A div to store the results

Here's how that would look:

```html
&lt;div id="quiz"&gt;&lt;/div&gt;
&lt;button id="submit"&gt;Get Results&lt;/button&gt;
&lt;div id="results"&gt;&lt;/div&gt;
```

Next we'll need a way to show questions, show results, and put it all together to generate a quiz.

We can start by laying out our functions, and we'll fill them in as we go:

```javascript
function showQuestions(questions, quizContainer){}

function showResults(questions, quizContainer, resultsContainer){}

function generateQuiz(questions, quizContainer, resultsContainer, submitButton){}
```

Looking at the parameters, our ```showQuestions``` function will take in a list of questions and put it into whatever HTML container we want. Convenient, right?

Our ```showResults``` function will take three parameters:
- The quiz questions
- The HTML container where we'll find the quiz and check the answers
- The HTML container where we want to put our results

Finally, the ```generateQuiz``` function will put everything together. With the parameters, we'll tell our function:
- what the questions are
- where we want the quiz
- where we want the results
- and which button should submit the quiz.

Once those parameters are in, the ```generateQuiz``` function will spit out a fully-working quiz.





## Show the Quiz Questions

Before we can show our questions, we'll need some questions (shocking, I know). Here's how the JavaScript might look:

```javascript
const myQuestions = [
  {
    question: "What is 10/2?",
    answers: {
      a: '3',
      b: '5',
      c: '115'
    },
    correctAnswer: 'b'
  },
  {
    question: "What is 30/3?",
    answers: {
      a: '3',
      b: '5',
      c: '10'
    },
    correctAnswer: 'c'
  }
];
```

Feel free to put in as many questions or answers as you want.

Now that we have our list of questions, we can show them on the page. We'll go through the following JavaScript line-by-line to see how it works:

```javascript
function showQuestions(questions, quizContainer){
  // we'll need a place to store the output and the answer choices
  let output = [];
  let answers = [];

  // for each question...
  questions.forEach( (currentQuestion, questionNumber) => {
    
    // first reset the list of answers
    answers = [];

    // for each available answer...
    for(letter in currentQuestion.answers){

      // ...add an html radio button
      answers.push(
        `<label>
          <input type="radio" name="question${questionNumber}" value="${letter}">
          ${letter} :
          ${currentQuestion.answers[letter]}
        </label>`
      );
    }

    // add this question and its answers to the output
    output.push(
      `<div class="question"> ${currentQuestion.question} </div>
      <div class="answers"> ${answers.join('')} </div>`
    );
  });

  // finally combine our output list into one string of html and put it on the page
  quizContainer.innerHTML = output.join('');
}
```

First, we'll create an ```output``` variable to contain all the HTML output including questions and answer choices.

Next, we'll create an ```answers``` variable to store the answer choices for each question. The use for this will become clearer in the next step.

Now that we have variables to store our output, we can start building the HTML for each question. We'll need to loop through each question like so:

```javascript
questions.forEach( (currentQuestion, questionNumber) => {
  // here goes the code we want to run for each question
});
```

For brevity, we're using an [arrow function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) to perform our operations on each question. Because this is in a [forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach?v=control) loop, we get the current value, the index (the position number of the current item in the array), and the array itself as parameters. We only need the current value and the index, which for our purposes, we'll name ```currentQuestion``` and ```questionNumber``` respectively.

Now let's look a the code inside our loop:

```javascript
// first reset the list of answers
answers = [];

// for each available answer...
for(letter in currentQuestion.answers){

  // ...add an html radio button
  answers.push(
    `<label>
      <input type="radio" name="question${questionNumber}" value="${letter}">
      ${letter} :
      ${currentQuestion.answers[letter]}
    </label>`
  );
}

// add this question and its answers to the output
output.push(
  `<div class="question"> ${currentQuestion.question} </div>
  <div class="answers"> ${answers.join('')} </div>`
);
```

For each question, we'll want to generate the right HTML, and so our first step is to reset the list of possible answers.

Next, we'll use a loop to fill in the answer choices for the current question. For each choice, we're creating an HTML radio button. Notice we're using [template literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals), which are strings but more powerful. We'll make use of the following features:

- Multi-line capabilities
- No more having to [escape](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#Escape_notation) quotes within quotes because template literals use backticks instead
- Embedded expressions so you can put bits of JavaScript right into your strings like this: ```${code_goes_here}```

Once we have our list of answer buttons, we can push the question HTML and the answer HTML onto our overall list of outputs.

Notice that we're using a template literal and some embedded expressions to first create the question div and then create the answer div. The ```join``` expression takes our list of answers and puts them together in one string that we can output into our ```answers``` div.

Now that we've generated the HTML for each question, we can join it all together and show it on the page:

```javascript
quizContainer.innerHTML = output.join('');
```

Now our ```showQuestions``` function is complete.





## Show the Quiz Results


- now show results
- function to look through our quiz, check the answers, and output the results
- we'll go through in more detail


function showResults(questions, quizContainer, resultsContainer){
  
  // gather answer containers from our quiz
  let answerContainers = quizContainer.querySelectorAll('.answers');
  
  // keep track of user's answers
  let userAnswer = '';
  let numCorrect = 0;
  
  // for each question...
  questions.forEach( (currentQuestion, questionNumber) => {

    // find selected answer
    userAnswer = (answerContainers[questionNumber].querySelector('input[name=question'+questionNumber+']:checked')||{}).value;
    
    // if answer is correct
    if(userAnswer===currentQuestion.correctAnswer){
      // add to the number of correct answers
      numCorrect++;
      
      // color the answers green
      answerContainers[questionNumber].style.color = 'lightgreen';
    }
    // if answer is wrong or blank
    else{
      // color the answers red
      answerContainers[questionNumber].style.color = 'red';
    }
  });

  // show number of correct answers out of total
  resultsContainer.innerHTML = numCorrect + ' out of ' + questions.length;
}



- first find answer divs (we'll look through them soon)
- now use a loop to go through each question
- for each question, see which answer was picked
  use selector to find checked; but if not then use empty object to avoid crashing the page
if correct answer
  add to correct number
  color this answer set green
if not correct answer
  color this answer set red
after we've checked each question, show the number correct out of the total








## Put Together the Pieces of Your Quiz


time to generate quiz


function generateQuiz(questions, quizContainer, resultsContainer, submitButton){

  // show questions right away
  showQuestions(questions, quizContainer);
  
  // on submit, show results
  submitButton.onclick = function(){
    showResults(questions, quizContainer, resultsContainer);
  }

}

show questions
when clicking submit, show answers


now to run our function

const quizContainer = document.getElementById('quiz');
const resultsContainer = document.getElementById('results');
const submitButton = document.getElementById('submit');

generateQuiz(myQuestions, quizContainer, resultsContainer, submitButton);


store elements in variables
(remember you already have the questions variable from before)
use those elements to generate your quiz


