
So you want to get a parameter from a URL?

Good choice.  URL parameters (also called query string parameters or URL variables) can have lots of useful data including product info, user preferences, link referrals, and more.


Let's get started!




##Get a URL Parameter

Let's say you have the following url:

```text
http://example.com/?product=shirt&color=blue&newuser&size=m
```

Here's a function to give you all the URL parameters as a neat object:

```javascript
function getAllUrlParams(url){
	
	// get query string from url (optional) or window
	var queryString = url ? url.split('?')[1] : window.location.search.slice(1);
	
	// we'll store the parameters here
	var obj = {};

	// if query string exists
	if(queryString) {
		
		// stuff after # is not part of query string, so get rid of it
		queryString = queryString.split('#')[0];

		// split our query string into its component parts
		var arr = queryString.split('&');

		for(var i=0; i<arr.length; i++) {
			// separate the keys and the values
			var a = arr[i].split('=');
			
			// in case params look like: list[]=thing1&list[]=thing2
			var paramNum = undefined;
			var paramName = a[0].replace(/\[\d*\]/, function(v){
				paramNum = v.slice(1,-1);
				return '';
			});

			// set parameter value (use 'true' if empty)
			var paramValue = typeof(a[1])==='undefined' ? true : a[1];
			
			// if parameter name already exists
			if(obj[paramName]){
				// convert value to array (if still string)
				if(typeof obj[paramName] === 'string'){
					obj[paramName] = [obj[paramName]];
				}
				// if no array index number specified...
				if(typeof paramNum === 'undefined'){
					// put the value on the end of the array
					obj[paramName].push(paramValue);
				}
				// if array index number specified...
				else{
					// put the value at that index number
					obj[paramName][paramNum] = paramValue;
				}
			}
			// if param name doesn't exist yet, set it
			else{
				obj[paramName] = paramValue;
			}
		}
	}

	return obj;
}
```

You'll see how this works soon, but first, here are some usage examples:

```javascript
getAllUrlParams().product; // 'shirt'
getAllUrlParams().color; // 'blue'
getAllUrlParams().newuser; // true
getAllUrlParams().nonexistent; // undefined
getAllUrlParams('http://test.com/?a=abc').a; // 'abc'
```

##Things to Know Before Using This Function

- Our function assumes the parameters are separated by the `&` character, as indicated in the [W3C specifications](https://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type).  However, the URL parameter format in general is [not clearly defined](https://url.spec.whatwg.org/#application/x-www-form-urlencoded), so you occasionally might see `;` or `&amp;` as [separators](https://www.w3.org/TR/1999/REC-html401-19991224/appendix/notes.html#h-B.2.2).

- Our function still works if a parameter doesn't have an equals sign or if it has an equals sign but no value.

- The values of duplicate parameters get put into an array.

If you just wanted a function you could drop into your code, you're done now.  If you'd like to understand how the function works, read on.

The following section assumes basic familiarity with JavaScript, so I've written [a quick guide to help you get up to speed](https://simplestepscode.com/learn-javascript/) in case you need it.


##How the Function Works

Overall, the function takes a URL's query string (the part after the `?` and before the `#`) and spits out the data in a neat object.



```javascript


```


explain function line-by-line

mention case sensitivity preference



// get query string from url (optional) or window
// we'll store the parameters here
// if query string exists
	// stuff after # is not part of query string, so get rid of it
	// split our query string into its component parts

		// separate the keys and the values
		// in case params look like: list[]=thing1&list[]=thing2
		// set parameter value (use 'true' if empty)

		// if parameter name already exists
			// convert value to array (if still string)
			// if no array index number specified...
				// put the value on the end of the array
			// if array index number specified...
				// put the value at that index number
		// if param name doesn't exist yet, set it






If your URL has any encoded special characters like spaces (encoded as `%20`), you can also decode them to get the original value like this:

```javascript
// assume a url parameter of test=a%20space

var original = getUrlParameter('test'); // 'a%20space'
var decoded = decodeURIComponent(original); // 'a space'
```

Just be careful not to decode something that's already decoded or else you can get a mistake, especially if percents are involved.

Anyways, congrats! Now you know how to get a URL parameter, and you might have picked up some other tricks along the way.

##Conclusion

The code in this article works for the most common use cases where you would get a URL query parameter.  If you are working with any edge cases such as uncommon separators or special formatting, then be sure to test and adjust accordingly.

If you want to do more with URLs, you can try out certain libraries including [jQuery URL plugin](https://plugins.jquery.com/url/) and [Medialize URI.js](http://medialize.github.io/URI.js/).  Whether you use your own code or go with a library, make sure to check everything to make sure it works for your use cases.


