How to Approach JavaScript Projects: What the Tutorials Don't Tell You


One of the issues I hear most often is that people who follow tutorials find themselves unable to approach JavaScript projects on their own.

One reason this happens is that tutorials give you a neat set of steps rather than the actual process of figuring out those steps on your own. Another reason people struggle with projects is that they compare their intermediate steps with someone else's finished product and get discouraged.

The truth of approaching a project isn't as neat as the tutorials (mine included) make it seem. The reality is that rather than belting out lines of perfect code, projects are done in small pieces with plenty of trial and error and a healthy dose of searching through reference materials.

Here are some suggestions for how you might approach a project in real life.


## First Get Comfortable With the Basics

At a minimum, you'll want to get familiar with some of the basics of JavaScript.  That might include variables, functions, if statements, loops, arrays, objects, getElementById, querySelectorAll, and innerHTML.

Once you're comfortable with these concepts, you'll move much faster because you can focus on creating your project instead of worrying about how to write an if statement.

A lot of people rush past this step, and everything takes longer as a result. It's like attempting to play Level 3 of a video game without getting comfortable with the controls back in Level 1. Lots of avoidable frustration.


## Make a Plan

Instead of jumping in and trying to do your project in a series of linear steps, take some time to look at the big picture first. Make a general plan. What sorts of things need to happen? For example, if you're trying to make a countdown clock, you might need a way to measure time, a place to hold the data, some spaces to display the numbers, and maybe a way to control the clock.

At this stage, you don't want to get bogged down in technical details because you're still thinking through the general ideas of what you want. As long as you have an overall plan, you'll have guideposts that will prevent you from getting too badly lost.



## Write It Without Code

Now that you have your plan, you'll want to figure out the details. My favorite way to do this is to write specifically what you want each part of your project to do. The key is to write it not in code but in plain language. That way, you can think clearly about what your project is doing without getting distracted by syntax details.

For a countdown clock, your notes might look something like this:

```javascript
// get current time

// specify end time

// find difference between current time and end time to get remaining time

// repeatedly get the remaining time for each step of the countdown

// show remaining time on screen at each step of the countdown
```

You can break individual parts into smaller pieces like so:

```javascript
// show remaining time on screen at each step of the countdown
	// divide time into hours, minutes, seconds
	// show hours in one container
	// do the same for minutes and seconds
```

Once you have your logic written out, you'll have a much easier time writing code. This is because it's simpler to write the code for a concrete step such as "subtract current time from end time" than it is to write the code for a whole project like "build a countdown clock."

Also note that you won't need to have a perfect series of steps written out at the beginning. This is a fluid process where it's okay to add things, remove things, get things wrong, learn, and improve.



## Build Small Pieces

Once you have your steps written out, you can start writing small pieces of code. For a countdown clock, you might start by getting the current time:

```javascript
var currentTime = new Date().getTime();
console.log(currentTime);
```

Once you're satisfied, you might then get the countdown's end time:

```javascript
var endTime = new Date(2017, 4, 4, 7, 30).getTime();
console.log(endTime);
```

Here are some benefits of writing your code in small pieces:
- You get a chance to make sure the individual pieces of functionality work before moving on to the next steps.
- It's easier to think through what you're doing when you're not distracted by too many moving parts at a time.
- You'll move faster because you're not trying to keep track of a million things at once.
- It's a lot easier to spot and prevent errors this way.
- You can experiment and learn as needed.
- You'll often end up writing helpful pieces of code you can use elsewhere.


## Put the Pieces Together

With your individual pieces ready, you can start putting your project together. For this stage, the key challenge is to make sure the pieces that worked on their own will still work once they're connected. This might require some small changes.

For example, here's how you might put together the start time and end time to calculate the remaining time in a countdown clock:

```javascript

// set our end time
var endTime = new Date(2017, 4, 4, 7, 30).getTime();

// calculate remaining time from now until deadline
function getRemainingTime(deadline){
  var currentTime = new Date().getTime();
  return deadline - currentTime;
}

// plug endTime into function to output remaining time
console.log(getRemainingTime(endTime));
```

This method of putting smaller pieces together is much easier than trying to make an entire project all at once because this way, you don't need to keep track of everything in your head at the same time.


## Experiment and Test

By this point in your project, you will have done plenty of experimenting and testing to make sure everything works. Once it seems to work, see if you can break it. For example, what if the user clicks here or there? What if one of the inputs is unexpected? What if the screen size is narrow? Does everything work in the browsers you expect? Is there a more efficient approach to any part of this project?


## Get Outside Help

Getting outside help can be an important step at any point when doing a project. This help can come from reference materials or other people. The reason I bring this up is that there's a common myth that developers sit down and write perfect code without having to look anything up or ask anyone for advice.

I've often heard that newer developers are surprised to know how frequently an experienced developer will look things up. In fact, since it's impossible to know everything, being able to look up information is one of the most valuable skills you can have.

Tools and techniques change, but the skill of learning doesn't go away.


## Refactor Your Code

Before you finish your project, you'll want to refactor your code.  Here are some questions you can ask yourself in order to improve your project:

- Is your code concise and readable? If you have to make a choice between conciseness and readability, you'll usually want to pick readability unless there's a huge performance reason or something. Readability makes your code easier to maintain, update, and fix.

- Is your code unnecessarily redundant? Are you repeating code that could be a function or a loop instead?

- Is your code efficient? For example, if you're searching your document for the same element over and over, you could store the element in a variable instead to make your code do less work.

- Have you used clear naming for your functions and variables? For example a function name like ```subem``` would be much clearer as ```submitEmail```. This is important because people often name things thinking they make sense, and then they get lost later because they forgot what their abbreviations meant. A good test for clarity is whether you'd have to explain a name too much to someone who is unfamiliar with it.

- Are there any potential naming collisions? For example, are you using names like "container" that are highly likely to be used elsewhere? Are you polluting global scope with too many variables?

- Has the editing process caused any errors? For instance, have you changed a variable name in one place without changing it everywhere else? Have you added something to an object but forgot to put in an extra comma?

As you refactor, your code will start to seem more and more elegant.  Then you'll put out the finished product and people will wonder how you wrote such perfect code.


## Recap

A coding project is rarely a linear process. If there's one thing I'd like you to take away from this article, it's that small pieces and experimentation will take you farther than trying to do everything at once.

If you've struggled with JavaScript projects in the past, I hope this article has been helpful, and if you have any other ideas that have helped you approach projects, feel free to share in the comments.



