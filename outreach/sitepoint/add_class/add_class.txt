
Add or Remove a Class in JavaScript Without jQuery

word count: 835



Sometimes you need to add or remove a CSS class with JavaScript, and you don't want to include an entire library like jQuery to do it.

This is useful in situations when you want your page elements to change in response to user actions.  

Example uses include:

- Showing or hiding a menu
- Highlighting a form error
- Showing a dialog box
- Showing different content in response to a selection
- Animating an element in response to a click

There are two JavaScript methods that let you work with classes: `className` or `classList`.  The former is widely compatible, while the latter is more modern and convenient.

We'll start with the compatible version first.

Note: This tutorial assumes some familiarity with JavaScript concepts like functions and variables.


## Modifying Classes the Compatible Way

The JavaScript `className` property lets you access the `class` attribute of an HTML element.  Some string manipulation will let us add and remove classes.

We'll access HTML elements using querySelectorAll, which is compatible with browsers from IE8 and up.

### Add a Class

To add a class, we'll write a function that takes in the elements we want to change and adds a specified class to all of them.

```javascript
function addClass(elements, myClass){

	// if we have a selector, get the chosen elements
	if(typeof(elements)==='string'){
		elements = document.querySelectorAll(elements);
	}

	// if we have only one dom element, make it an array to simplify behavior
	else if(!elements.length){ elements=[elements]; }
	
	// add class to all chosen elements
	for(var i=0; i<elements.length; i++){
		if(!(' '+elements[i].className+' ').indexOf(' '+myClass+' ') > -1){
			elements[i].className += ' ' + myClass;
		}
	}
}
```

You'll see how the function works soon, but to watch the function in action, feel free to use this CSS:

```css
.red{
	background: red;
}

.highlight{
	background: gold;
}
```

...and this HTML:

```html
<div id="iddiv" class="highlight">ID div</div>

<div class="classdiv">Class div</div>
<div class="classdiv">Class div</div>
<div class="classdiv">Class div</div>
```

Here are some usage examples of the function itself:

addClass('#iddiv','highlight');
addClass('.classdiv','highlight');

addClass(document.getElementById('iddiv'),'highlight');
addClass(document.querySelector('.classdiv'),'highlight');
addClass(document.querySelectorAll('.classdiv'),'highlight');

Notice that you can identify the HTML elements you want to change through a selector or you can directly put in the elements themselves.


### How Our addClass Function Works

Our addClass function first takes two parameters: the HTML elements we want to modify and the class we want to add.  Our goal is to loop through each HTML element, make sure the class is not already there, and then add the class.

First, if we've chosen to identify our HTML elements through a selector such as `#iddiv` or `.classdiv`, then we can use `querySelectorAll` to grab all of our desired elements.

```javascript
// if we have a selector, get the chosen elements
if(typeof(elements)==='string'){
	elements = document.querySelectorAll(elements);
}
```

However, if the HTML elements are fed into the function directly, we can loop through them.  If there's only one element, we'll make it an array so we can use the same loop and simplify our code.

```javascript
// if we have only one dom element, make it an array to simplify behavior
else if(!elements.length){ elements=[elements]; }
```

Now that we have our elements in a format we can loop through, we'll go through each one, check if the class is already there, and if not, we'll add the class.

```javascript
// add class to all chosen elements
for(var i=0; i<elements.length; i++){
	if(!(' '+elements[i].className+' ').indexOf(' '+myClass+' ') > -1){
		elements[i].className += ' ' + myClass;
	}
}
```

Notice we're adding a space at the beginning and end in order to simplify the pattern we're looking for and avoid needing a regular expression.

In any case, we're done!  You can now add a class.



### Remove a Class

To remove a class, we can use the following function:

```javascript
function removeClass(elements, myClass){

	// if we have a selector, get the chosen elements
	if(typeof(elements)==='string'){
		elements = document.querySelectorAll(elements);
	}
	
	// if we have only one dom element, make it an array to simplify behavior
	else if(!elements.length){ elements=[elements]; }
	
	// create pattern to find class name
	var reg = new RegExp('(^| )'+myClass+'($| )','g');

	// remove class from all chosen elements
	for(var i=0; i<elements.length; i++){
		elements[i].className = elements[i].className.replace(reg,' ');
	}
}
```

Most of this `removeClass` function works the same way as our `addClass` function by gathering the desired HTML elements and looping through them.  The only difference is the part where the class gets removed.

Here's the class removal in more detail:

```javascript
// create pattern to find class name
var reg = new RegExp('(^| )'+myClass+'($| )','g');

// remove class from all chosen elements
for(var i=0; i<elements.length; i++){
	elements[i].className = elements[i].className.replace(reg,' ');
}
```

First, we create a regular expression to look for all instances of our desired class.  The expression `'(^| )'+myClass+'($| )'` means the beginning or a space followed by `myClass` followed by the end or a space.  The `'g'` means global match, which means find all instances of the pattern.

Using our pattern, we replace the class name with a space.  That way, class names in the middle of the list will remain separated, and there's no harm done if the removed class is on the ends.








## Modifying Classes the Modern Way

Browsers from IE10 and up support a property called [classList](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList#Browser_compatibility), which makes an element's classes much easier to deal with.

In [another article](https://www.sitepoint.com/jquery-vs-raw-javascript-2-css3-animation/), Craig Buckler has provided a list of things classList can do:

> The following properties are available:
>
> 	length — the number of class names applied
> 	item(index) — the class name at a specific index
> 	contains(class) — returns true if a node has that class applied
> 	add(class) — applies a new class to the node
> 	remove(class) — removes a class from the node
> 	toggle(class) — removes or adds a class if it’s applied or not applied respectively
>
> We can use this in preference to the clunkier className property:
>
> ```javascript
> document.getElementById("myelement").classList.add("myclass");
> ```


Let's use this information to create functions that add and remove classes from all elements that match a selector.

These functions will get all desired elements, loop through them, and add or remove a class to each one.

### Add Class

```javascript
function addClass(selector, myClass){
	
	// get all elements that match our selector
	elements = document.querySelectorAll(selector);
	
	// add class to all chosen elements
	for(var i=0; i<elements.length; i++){
		elements[i].classList.add(myClass);
	}
}

// usage examples:
addClass('.class-selector', 'example-class');
addClass('#id-selector', 'example-class');
```


### Remove class

```javascript
function removeClass(selector, myClass){
	
	// get all elements that match our selector
	elements = document.querySelectorAll(selector);
	
	// remove class from all chosen elements
	for(var i=0; i<elements.length; i++){
		elements[i].classList.remove(myClass);
	}
}

// usage examples:
removeClass('.class-selector', 'example-class');
removeClass('#id-selector', 'example-class');
```



## Conclusion

We've covered how to add and remove classes through `className` (the compatible way) and `classList` (the more modern way).

When you can control CSS classes through JavaScript, you unlock a lot of functionality including content display updates, animations, error messages, dialogs, menus, and more.

I hope this article has been helpful, and if you have any questions or thoughts, please feel free to share in the comments.




