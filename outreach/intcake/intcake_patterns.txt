
algorithm patterns


greedy algorithm approach:
- try to walk through once, finding best answer so far
- what other values do we need to keep updated in order to maintain the best answer so far?



when in doubt, try a hash map (think it's constant, but check time complexity)



when unsure, write out naive solution and look for repeated steps to eliminate



sometimes walk through a problem once forwards and once backwards


when dealing with numbers, don't forget negatives and zero (also, really huge numbers can cause integer overflows where the number is too big for the memory allocated for it)


sometimes an intermediate RESULT is more important than the intermediate VALUES that determine the result (like a sum might be more important than the two numbers making it). for example we might need to keep track of highest number and product of highest two numbers (instead of keeping track of highest and second highest).  that way we can test for the bigger number instead of having to maintain an order of items


for each iteration in a greedy algorithm, go through each value we need to keep updated and ask:
do we have a new best [value]?


sometimes the order of items can matter. check if a problem can be made easier by sorting, especially if it seems like each item needs to be compared against each other item (might be easier to compare adjacent sorted items)


memoization can store intermediate values in an object to avoid duplicate work


recursion is usually best to avoid for arbitrarily large inputs because those functions pile up into a call stack that takes up O(n) space (also can cause a stack overflow) (look for bottom-up approach instead)


dynamic programming is kind of like the next step up from greedy algorithms. instead of keeping track of the best answer so far, we're keeping track of all our answers so far (possibly keeping them in an array)


to avoid confusion in details with visual problems:
	- draw out all cases
	- use clear variable names


always read carefully through problem and do what it's actually asking for.  sounds obvious, but this is one of THE most common mistakes.


whenever designing a data structure with inserts and getters, remember ahead-of-time vs just-in-time approach.  ahead of time can often be better because you're computing and storing and keeping track of stuff before it's needed, so it can be accessed quickly when needed. also it can be easier to keep track of stuff as it comes in one at a time rather than waiting until the end to dig through a pile of stuff. depends on the situation and usage though






