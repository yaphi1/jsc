
Easy Ways to Sound Better In Coding Interviews Without Learning Anything New





Tip 1: Think of the People

When answering an interview question, people often give the technical solution without thinking about who the solution might affect.

This is a missed opportunity.

For example, consider the question, "What's one way to make a web page load faster?"

Answer A:
"I would compress images to make a website load faster."

Answer B:
"I would compress images to make a website load faster. That's really important because faster sites create a better experience for the users, so they're more likely to stay on the site. That directly affects revenue."

Both answers are correct, but Answer B looks much better despite showing the same level of technical knowledge.

So what's the difference?

Answer A gives a solution, while Answer B explains who that solution affects and why. By framing your answers in terms of who they affect, you show an ability to put your work in context and understand the reasons behind decisions rather than just doing things because you think you should. In this example, the candidate has shown empathy for the users and a strategic mindset for the business. Not bad for two extra sentences!

You can apply these insights to any stage of your interview. For example, when discussing your skills, experience, or personal projects, try asking yourself, "Who does this affect?" A good guideline is to consider the users, the business, and the team.

User considerations:
- Is the website fast, convenient, and easy to navigate?
- Are things being put on the site to help the user or just to look cool?

Business considerations:
- Is the value of the product clear?
- Can people find what they're looking for?
- Is there anything distracting or confusing that could hurt conversions?

Team considerations:
- Is the code clear, organized, and maintainable?
- Does a particular action or idea save time or effort for the team?
- Does a decision fit the working styles and strengths of the team?

Now that we have this framework to put our experience in context, we can look at a couple of examples.

How to Discuss a Code Demo

Let's say you're showing a bouncing ball animation you've created. Instead of talking about the code and stopping there, you can also discuss the process of learning how to animate that ball. Then you can talk about how you'd use this process to learn new things on the job whenever you need to. This saves time and energy for the team because you can get up to speed on new things without holding everyone else back.

By taking a few extra seconds to discuss your learning process, you've transformed a normal code demo into evidence that you'll be great for the team.

How to Discuss Past Experience

Suppose you're discussing a website you've created. It could be professional experience, or it could be something you did on your own. Either way, you can frame what you've done in terms of the people it affects.

For example, maybe you made your code clear and readable. That'll make it easier to maintain, showing that you'd be a good teammate. On the other hand, maybe you could have made a navigation menu clearer. Mentioning this shows awareness of the user experience as well as growth in your thinking.

When discussing past experience in general, think of the people affected in terms of what you did well and what you'd do differently.

Key Takeaway

In interviews, think about the users, the business, and the team. Your performance will improve with no new knowledge.













Tip 2: Name Things Clearly

In the heat of a coding interview, it can be tempting to give short, hard-to-read names to JavaScript variables, CSS classes, or whatever else you might name.

Resist this temptation.

At first, you'll save some time by naming a function "se" instead of "submitEmail" for example, but you'll waste much more time trying to keep track of what "se" means later on.

Here are the benefits of clear naming:

- Clear names help you keep track of things. This frees up brainpower to work on a problem instead of remembering a bunch of abbreviations.

- Clear names help your interviewer see your thought process. This is especially important because interviewers tend to care more about the thought process than the answer. An added benefit is that if you don't finish a question, an interviewer who has followed your process will be able to give you a good amount of partial credit.

- Clear names show that you write understandable code, which is crucial on a team where multiple people work on the same codebase.













Tip 3: Lay Out the Puzzle Pieces

In interviews, too many people jump straight into an answer without first taking a step back to assess the situation. This approach makes it too easy to get lost.

Instead, try laying out the following pieces in verbal or written form:
- What information do you have?
- What information is missing?
- Are there diagrams you can draw to simplify your thinking?

Here are the benefits of laying out the pieces before jumping into an answer:
- You'll narrow down exactly what you need to solve.
- You'll have an easier time keeping track of progress so you won't get lost.
- The interviewer will be able to see your thought process.
- Connections will start to appear among separate points.
- Gaps in the information will reveal themselves, making it easier to ask clarifying questions.
- Instead of stalling at the beginning of a question, you'll have a structured and logical way to make progress. This will give you time to think and help you feel more confident.













Tip 4: If You Don't Know, Say How You'd Find Out

Sometimes, you'll run into questions you're not sure how to answer.

examples:
specific search terms you might use
common sources like stack overflow and mdn
test code in console















