



It can be tough to think of project ideas.

In fact, this is one of the most common frustrations I hear when I talk to people who are learning to code.

To help everyone out, I decided to ask the experts what sorts of projects they would recommend.

Here's who I asked:

Chris Coyier (CSS-Tricks and CodePen)

Jim Hibbard (JavaScript Editor at Sitepoint)

Sara Soueidan (Dev of the Year and writer at Codrops)

Ben Moss (Editor at WebdesignerDepot)

Laurence Bradford (Learn to Code With Me)

Parker Phinney (Interview Cake)



For each person on this list, I'll quote their suggestion and then follow it up with commentary (difficulty level, reasons the suggestion is effective, etc).


Huge thanks to everyone who answered!






mini-bio (with links), suggestion, commentary










Chris Coyier: (put in svg book link, and put in links for other people too)

I like the idea of copying a website as closely as you can. You'd only do this for practice, never for something you'd present as your own work. But a lot can be learned from emulating something you already like.


Commentary:

Two big things I like about this suggestion:

1. It can be whatever difficulty level you want.

2. You won't run out of projects until you run out of sites on the entire internet.












Jim Hibbard (remember to add links in quote)

One of the things I'd recommend is taking a component built with one technology and trying to reimplement it yourself in another. For example, there are a ton of lightbox widgets out there and for a beginner, this can seem like magic — you include the lib, add a couple of data attributes to some elements and voilà, you have lightbox functionality. What I'd suggest is trying to roll your own (in this case) lightbox with vanilla JS. It's really very simple and can give you a good idea of what this previously magic library is doing under the hood. You can also look at implementing a React component in Vue.js, or an Ember component in Angular to learn more about how the respective frameworks approach the same problem.

I'd also highly recommend pulling apart common libraries, as that is a great learning experience which will expose you to programming patterns and idioms in the real world. A few years back I helped organize a contest (https://www.sitepoint.com/community/t/javascript-challenge-convert-jquery-to-plain-javascript/30609#post5541688) on SitePoint in this vein and ended up taking an extended peek (http://hibbard.eu/dom-selection-without-jquery/) beneath the hood of jQuery. That was very educational.



Commentary:

self-reliance (avoid plugin reflex)
deeper understanding
good habits from seeing how great coders did something













Sara Soueidan


My advice can be summarized as follows:

1) Start something today, and don't wait till you've mastered all skills before you start, before given the pace at which our industry progresses, this may mean that you'll never do.

2) Share what you learn. You get better at what you do when you help other people understand it because it forces you to understand it well yourself before you can help others do it.

3) Break down other people's code, and break it. You'll be surprised at how much insight and lessons you can learn from doing this.

4) Learn the basics—HTML5, SVG, CSS and plain JavaScript; the rest follows as you need it.

5) Be persistent, and don't let yourself get overwhelmed. Only learn the stuff that you need, when you need it.



Commentary:

psychology of start today and only do what you need so you don't get overwhelmed

sharing what you learn: great way to understand and remember, but also impressive to potential employers or clients; makes you look like an expert and a communicator; also helps you practice communicating an idea, which can be as important as the idea itself

seeing others' code is important










Ben Moss

Being a good developer is about solving problems in the most efficient way possible. There are thousands of tools available to you, knowing which one to use means understanding their strengths and weaknesses.

The best way I have found to understand *why* a language solves the problems it does, is to deliberately exclude it from my workflow.

Start by selecting a common project, building a sliding drawer navigation for example. The best way to accomplish that is with JavaScript, so build it using anything but JavaScript, pure CSS for example. In doing so you’ll learn *why* JavaScript is a better choice than CSS for that project (it has better event detection).

By building projects with artificial restrictions you’ll accomplish several things: you’ll explore lesser-known aspects of secondary tools, broadening your knowledge; you’ll learn to think outside the confines of any one solution when solving problems; you’ll deepen your understanding, not just of *how* a language does something, but *why* it does it.

You can repeat this process with anything you want to learn: animate an SVG chart without using GSAP; load, parse, and write XML data into the DOM without using jQuery; layout a responsive UI without using Flexbox.

You’ll end up with a deeper understanding of your toolset and a broader foundation on which to build your knowledge.




Commentary:

too easy to go through just using things because someone told you to, but if you try to accomplish stuff without the tools, then you understand why the tools make sense and also when they don't make sense

















Laurence Bradford


As far as project ideas go, a person can create a simple quiz using HTML, CSS, and JavaScript. 

Here's a jQuery plugin a person can use to get started from: https://github.com/jewlofthelotus/SlickQuiz

I like quizzes because they're fun! It allows a person to show their personality. Plus, if a person makes it funny/useful, it's something other people can use. It may even have the potential to help others.




Commentary:

- importance of creating something fun/useful
- social aspect of being able to show your friends this cool thing you created can be a great motivator
- plugin: being able to incorporate someone else's code is important in working with a team










Parker Phinney


My advice:
Write a javascript bookmarklet that manipulates /other/ websites in an interesting and helpful way. Some ideas:

    Remove the feed from Facebook so it's less distracting.
    Re-style the Google search results page to be in "night mode" so it's easier on the eyes.
    Filter all emails from today out of your gmail inbox, so your day's focus isn't as easily pulled into new things.

Great way to practice JavaScript and DOM manipulation. And hopefully it makes you feel slightly subversive and powerful--that's key to getting hooked on coding in the early days.



Commentary:

- practical usefulness

- psychology of capturing the feeling of having these new powers; really imporant












