


topics to review more:
- react router (maybe don't use context though: https://reactjs.org/docs/context.html)
- refs: a ref sets this.whateverYouWant as a reference to the dom element where you put the ref
- state and props



import

	if import sees a plain string, it automatically looks in node_modules

	if you want something different, you need to specify the path
		if you don't use an extension, it will assume the file is .js




export

	"export default" defines what gets exported when you write:
		import Whatever from 'whatever';

	you can also have named exports that get called like this:
		import {render} from 'react-dom';




jsx

	remember to use className for html classes in jsx

	single tags need closing slashes in jsx

	comments need to look like this inside jsx
		{/* text here */}
		Also, they can't go outside the containing element


router

	import BrowserRouter, Match, and Miss from 'react-router'
	wrap top level of app in a <BrowserRouter></BrowserRouter>

	then use context to make router available to component
		StorePicker.contextTypes = {
			router: React.PropTypes.object
		};
		- note: I'm not super comfortable with this since it seems like a dangerous dependency



state and props
	
	pass state-changing functions down the component tree through props

	when updating state, remember to take a copy of the object using the SPREAD OPERATOR



refs
	a ref sets this.whateverYouWant as a reference to the dom element where you put the ref
	
	for example:
		<input ref={(elem) => this.price = elem} type="text" placeholder="Price"/>




when looping over elems in jsx, give each a unique key attribute (for that loop)
	
	in react, generally loop using map

	can't access key attribute inside component, so if you need to access it as a prop, then give it a made-up name like index or something



